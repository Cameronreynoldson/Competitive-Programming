import java.util.Arrays;

public class MergeSort
{

	public static void main(String[] args)
	{
		int[] arrayToSort = {-5,1,10,9,7,6,5,2};
		int[] sorted = mergeSort(arrayToSort,0,arrayToSort.length-1);
		System.out.println(Arrays.toString(sorted));
	}


	public static int[] mergeSort(int[] array, int low, int high)
	{
		if(low < high) //dividing the array up until there are only arrays of size 1
		{
			int mid = (high+low)/2;
			mergeSort(array,low,mid);
			mergeSort(array,mid+1,high);
			merge(array,low,mid,high);
		}

		return array;
	}


	public static void merge(int[] array, int low, int mid, int high)
	{
		int[] temp = new int[high-low+1];
		int left = low;
		int right = mid+1; 
		int k = 0; //for the loop 

		while(left <= mid && right <= high) //if there are still elements on both sides, need to choose the higher value
		{
			if(array[left] < array[right])
			{
				temp[k] = array[left];
				left++;
			}
			else
			{
				temp[k] = array[right];
				right++;
			}
			k++;
		}

			while(left <= mid) //if more elements are on the left side than the right, doesn't matter about choosing higher value
			{
				temp[k] = array[left];
				left++;
				k++;
			}

			while(right <= high) //if more elements are on the right side than the left, doesn't matter about choosing higher value
			{
				temp[k] = array[right];
				right++;
				k++;
			}
		
		for(int i = 0; i < temp.length; ++i) //replacing the values of the original array with the values of the temp array, probably not needed tbh
		{
			array[low+i] = temp[i];
		}
	}
}
